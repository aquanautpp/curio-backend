import random
import re
from datetime import datetime

class AITutorEngine:
    """
    Engine de IA para o tutor virtual que guia estudantes atrav√©s de perguntas
    e dicas, sem dar respostas diretas.
    """
    
    def __init__(self):
        self.conversation_starters = [
            "Ol√°! Estou aqui para te ajudar com o problema de hoje. Por onde voc√™ gostaria de come√ßar?",
            "Oi! Vamos trabalhar juntos neste problema. Qual parte voc√™ achou mais interessante?",
            "Ol√°! Que bom te ver aqui. J√° deu uma olhada no problema? O que voc√™ entendeu at√© agora?"
        ]
        
        self.encouragement_phrases = [
            "Voc√™ est√° no caminho certo!",
            "Boa reflex√£o!",
            "Interessante perspectiva!",
            "Continue pensando assim!",
            "Excelente racioc√≠nio!"
        ]
        
        self.guiding_questions = {
            'financial': [
                "Que informa√ß√µes voc√™ tem sobre a renda da fam√≠lia?",
                "Quais s√£o os gastos fixos que voc√™ identificou?",
                "Como voc√™ calcularia quanto sobra no or√ßamento atual?",
                "O que significa economizar 20% da renda?",
                "Como voc√™ dividiria o custo da viagem pelos meses dispon√≠veis?"
            ],
            'math': [
                "Que opera√ß√µes matem√°ticas voc√™ precisa fazer aqui?",
                "Como voc√™ organizaria os n√∫meros do problema?",
                "Qual √© a primeira conta que voc√™ faria?",
                "Como voc√™ verificaria se sua resposta faz sentido?"
            ],
            'general': [
                "O que o problema est√° pedindo exatamente?",
                "Quais informa√ß√µes voc√™ tem dispon√≠veis?",
                "Como voc√™ dividiria este problema em partes menores?",
                "Que estrat√©gia voc√™ usaria para resolver isso?"
            ]
        }
        
        self.hint_patterns = {
            'calculation': [
                "Que tal fazer os c√°lculos passo a passo?",
                "Comece somando todos os gastos atuais.",
                "Lembre-se: renda total - gastos = sobra dispon√≠vel.",
                "Para porcentagem: valor √ó (porcentagem √∑ 100)"
            ],
            'organization': [
                "Tente organizar as informa√ß√µes em uma lista.",
                "Que tal separar o que voc√™ sabe do que precisa descobrir?",
                "Fa√ßa uma tabela com receitas e despesas."
            ],
            'strategy': [
                "Pense em diferentes cen√°rios poss√≠veis.",
                "E se eles cortassem alguns gastos?",
                "Existem outras formas de aumentar a renda?",
                "Como outras fam√≠lias resolveriam isso?"
            ]
        }
    
    def generate_response(self, student_message, conversation_history, problem_context=None):
        """
        Gera uma resposta do tutor baseada na mensagem do estudante e no contexto.
        """
        student_message = student_message.lower().strip()
        
        # Primeira mensagem da conversa
        if len(conversation_history) == 0:
            return {
                'message': random.choice(self.conversation_starters),
                'type': 'greeting'
            }
        
        # Detecta o tipo de resposta necess√°ria
        response_type = self._analyze_student_message(student_message)
        
        if response_type == 'needs_encouragement':
            return self._generate_encouragement(student_message)
        elif response_type == 'needs_guidance':
            return self._generate_guiding_question(student_message, problem_context)
        elif response_type == 'needs_hint':
            return self._generate_hint(student_message, problem_context)
        elif response_type == 'good_progress':
            return self._generate_progress_feedback(student_message)
        else:
            return self._generate_general_response(student_message)
    
    def _analyze_student_message(self, message):
        """
        Analisa a mensagem do estudante para determinar o tipo de resposta necess√°ria.
        """
        # Palavras que indicam confus√£o ou dificuldade
        confusion_words = ['n√£o entendo', 'confuso', 'dif√≠cil', 'n√£o sei', 'ajuda', 'perdido']
        
        # Palavras que indicam progresso
        progress_words = ['calculei', 'descobri', 'acho que', 'resultado', 'resposta']
        
        # Palavras que pedem dicas
        hint_words = ['dica', 'hint', 'como', 'qual', 'onde']
        
        if any(word in message for word in confusion_words):
            return 'needs_encouragement'
        elif any(word in message for word in hint_words):
            return 'needs_hint'
        elif any(word in message for word in progress_words):
            return 'good_progress'
        else:
            return 'needs_guidance'
    
    def _generate_encouragement(self, message):
        """
        Gera uma mensagem de encorajamento.
        """
        encouragement = random.choice(self.encouragement_phrases)
        follow_up = random.choice([
            "Vamos tentar uma abordagem diferente.",
            "Que tal come√ßarmos com algo mais simples?",
            "N√£o se preocupe, vamos resolver isso juntos.",
            "Todo mundo tem dificuldades √†s vezes. O importante √© continuar tentando!"
        ])
        
        return {
            'message': f"{encouragement} {follow_up}",
            'type': 'encouragement'
        }
    
    def _generate_guiding_question(self, message, problem_context):
        """
        Gera uma pergunta para guiar o estudante.
        """
        # Determina o tipo de problema baseado no contexto
        if problem_context and 'category' in problem_context:
            category = problem_context['category']
            if category == 'personal_finance':
                questions = self.guiding_questions['financial']
            else:
                questions = self.guiding_questions['general']
        else:
            questions = self.guiding_questions['general']
        
        question = random.choice(questions)
        
        return {
            'message': question,
            'type': 'question'
        }
    
    def _generate_hint(self, message, problem_context):
        """
        Gera uma dica espec√≠fica.
        """
        # Detecta que tipo de dica √© necess√°ria
        if 'calcul' in message or 'conta' in message or 'n√∫mero' in message:
            hints = self.hint_patterns['calculation']
        elif 'organiz' in message or 'como' in message:
            hints = self.hint_patterns['organization']
        else:
            hints = self.hint_patterns['strategy']
        
        hint = random.choice(hints)
        
        return {
            'message': f"üí° Dica: {hint}",
            'type': 'hint'
        }
    
    def _generate_progress_feedback(self, message):
        """
        Gera feedback quando o estudante mostra progresso.
        """
        feedback_options = [
            "Muito bem! Voc√™ est√° pensando na dire√ß√£o certa.",
            "Excelente! Continue desenvolvendo essa ideia.",
            "Boa! Agora, como voc√™ pode verificar se isso est√° correto?",
            "Interessante! E o que mais voc√™ pode descobrir com essa informa√ß√£o?"
        ]
        
        feedback = random.choice(feedback_options)
        
        return {
            'message': feedback,
            'type': 'feedback'
        }
    
    def _generate_general_response(self, message):
        """
        Gera uma resposta geral quando n√£o h√° padr√£o espec√≠fico detectado.
        """
        responses = [
            "Entendi. Como voc√™ chegou a essa conclus√£o?",
            "Interessante. Pode me explicar seu racioc√≠nio?",
            "Certo. Que tal verificarmos isso passo a passo?",
            "Ok. O que voc√™ faria em seguida?",
            "Compreendo. Como isso se relaciona com o problema?"
        ]
        
        return {
            'message': random.choice(responses),
            'type': 'general'
        }
    
    def should_provide_hint(self, conversation_history):
        """
        Determina se √© hora de oferecer uma dica baseado no hist√≥rico da conversa.
        """
        if len(conversation_history) < 3:
            return False
        
        # Verifica se o estudante est√° lutando (muitas mensagens de confus√£o)
        recent_messages = conversation_history[-3:]
        confusion_count = sum(1 for msg in recent_messages 
                            if msg.get('sender') == 'student' and 
                            any(word in msg.get('message', '').lower() 
                                for word in ['n√£o sei', 'dif√≠cil', 'confuso']))
        
        return confusion_count >= 2
    
    def generate_summary(self, conversation_history):
        """
        Gera um resumo da conversa para an√°lise posterior.
        """
        student_messages = [msg for msg in conversation_history if msg.get('sender') == 'student']
        tutor_messages = [msg for msg in conversation_history if msg.get('sender') == 'tutor']
        
        return {
            'total_messages': len(conversation_history),
            'student_messages': len(student_messages),
            'tutor_messages': len(tutor_messages),
            'hints_given': len([msg for msg in tutor_messages if msg.get('type') == 'hint']),
            'encouragements_given': len([msg for msg in tutor_messages if msg.get('type') == 'encouragement']),
            'engagement_level': 'high' if len(student_messages) > 5 else 'medium' if len(student_messages) > 2 else 'low'
        }

